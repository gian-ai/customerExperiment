*****Deploy back-end, replace backend-service with whatever the name is.
gcloud run deploy backend-auth --source . --platform managed --region us-central1 --allow-unauthenticated
BACKEND_URL=$(gcloud run services describe backend-auth --platform managed --region us-central1 --format 'value(status.url)')
echo $BACKEND_URL

*****Setup Front-End service account
gcloud iam service-accounts create frontend-sa --display-name "Frontend Service Account"
gcloud run services add-iam-policy-binding backend-auth --member=serviceAccount:frontend-sa@spatial-thinker-360216.iam.gserviceaccount.com --role=roles/run.invoker --platform managed --region us-central1
gcloud iam service-accounts keys create key.json --iam-account=frontend-sa@spatial-thinker-360216.iam.gserviceaccount.com

** Deploy front-end
gcloud run deploy frontend-auth --source . --platform managed --region us-central1 --service-account frontend-sa@spatial-thinker-360216.iam.gserviceaccount.com --allow-unauthenticated

*****Remove public access to backend
gcloud run services remove-iam-policy-binding backend-auth --member=allUsers --role=roles/run.invoker --platform managed --region us-central1

**** Run Locally
docker run -p 8501:8501 docker-image
docker run -p 8000:9000 



****Python test****

import requests
from google.auth.transport.requests import Request
from google.oauth2 import service_account

# Path to your service account key file
SERVICE_ACCOUNT_FILE = 'key.json'
BACKEND_URL = 'YOUR_BACKEND_SERVICE_URL'

# Load the service account credentials
credentials = service_account.IDTokenCredentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE,
    target_audience=BACKEND_URL
)

def call_backend():
    # Refresh the token to get a valid ID token
    request = Request()
    credentials.refresh(request)
    id_token = credentials.token

    response = requests.get(
        BACKEND_URL,
        headers={"Authorization": f"Bearer {id_token}"}
    )
    print("Backend response:", response.json())

if __name__ == "__main__":
    call_backend()
